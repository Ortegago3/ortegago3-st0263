# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import file_service_pb2 as src_dot_proto_dot_file__service__pb2


class FileServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListFiles = channel.unary_unary(
                '/FileService/ListFiles',
                request_serializer=src_dot_proto_dot_file__service__pb2.FileRequest.SerializeToString,
                response_deserializer=src_dot_proto_dot_file__service__pb2.FileListResponse.FromString,
                )
        self.UploadFile = channel.stream_unary(
                '/FileService/UploadFile',
                request_serializer=src_dot_proto_dot_file__service__pb2.FileChunk.SerializeToString,
                response_deserializer=src_dot_proto_dot_file__service__pb2.UploadStatus.FromString,
                )


class FileServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFile(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=src_dot_proto_dot_file__service__pb2.FileRequest.FromString,
                    response_serializer=src_dot_proto_dot_file__service__pb2.FileListResponse.SerializeToString,
            ),
            'UploadFile': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=src_dot_proto_dot_file__service__pb2.FileChunk.FromString,
                    response_serializer=src_dot_proto_dot_file__service__pb2.UploadStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileService/ListFiles',
            src_dot_proto_dot_file__service__pb2.FileRequest.SerializeToString,
            src_dot_proto_dot_file__service__pb2.FileListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/FileService/UploadFile',
            src_dot_proto_dot_file__service__pb2.FileChunk.SerializeToString,
            src_dot_proto_dot_file__service__pb2.UploadStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
